I"Ê<h1 id="patterns-of-inference">Patterns of inference</h1>

<p>Name of the game in these examples is to understand what effect manipulating <code class="language-plaintext highlighter-rouge">b</code> will have on <code class="language-plaintext highlighter-rouge">a</code>.</p>

<p>That is, if we change <code class="language-plaintext highlighter-rouge">b</code>, how will <code class="language-plaintext highlighter-rouge">a</code> change?</p>

<h2 id="statistical-dependence">Statistical dependence</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>var model = function(observation){
  var c = flip(0.5)
  var b = flip(0.5)
  var a = b ? flip(0.9) : flip(0.2)
  condition(b == observation)
  return {"a": a}
}
var b_is_true = Infer({method: "rejection", samples:1000},
     function(){ model(true) })

print("We observe b is true")
viz.auto(b_is_true)

var b_is_false = Infer({method: "rejection", samples:1000},
     function(){ model(false) })

print("We observe b is not true")
viz.auto(b_is_false)
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>var model = function(observation){
  var c = flip(0.5)
  var b = c ? flip(0.1) : flip(0.9)
  var a = c ? flip(0.1) : flip(0.9)
  condition(b == observation)
  return {"a": a}
}
var b_is_true = Infer({method: "rejection", samples:1000},
     function(){ model(true) })

print("We observe b is true")
viz.auto(b_is_true)

var b_is_false = Infer({method: "rejection", samples:1000},
     function(){ model(false) })

print("We observe b is not true")
viz.auto(b_is_false)
</code></pre></div></div>

<h2 id="screening-off">Screening off</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>var model = function(observation){
  var c = flip(0.5)
  var b = c ? flip(0.1) : flip(0.9)
  var a = c ? flip(0.1) : flip(0.9)
  condition(b == observation)
  return {"a": a}
}

var b_is_true = Infer({method: "rejection", samples:10000},
     function(){ model(true) })

print("We observe b is true")
viz.auto(b_is_true)

var b_is_false = Infer({method: "rejection", samples:10000},
     function(){ model(false) })

print("We observe b is not true")
viz.auto(b_is_false)
</code></pre></div></div>

<p>Now, what happens if we know <code class="language-plaintext highlighter-rouge">c</code> to be <code class="language-plaintext highlighter-rouge">true</code> ?</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>var model = function(observation){
  var c = flip(0.5)
  var b = c ? flip(0.1) : flip(0.9)
  var a = c ? flip(0.1) : flip(0.9)
  condition(c &amp; (b == observation))
  return {"a": a}
}

var b_is_true = Infer({method: "rejection", samples:10000},
     function(){ model(true) })

print("We observe c and that b is true")
viz.auto(b_is_true)

var b_is_false = Infer({method: "rejection", samples:10000},
     function(){ model(false) })

print("We observe c and that b is not true")
viz.auto(b_is_false)
</code></pre></div></div>

<h2 id="explaining-away">Explaining away</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>var model = function(observation){
  var a = flip(0.5)
  var b = flip(0.5)
  var c = (a || b) ? flip(0.9) : flip(0.2)
  condition(b == observation)
  return {"a": a}
}

var b_is_true = Infer({method: "rejection", samples:10000},
     function(){ model(true) })

print("We observe b is true")
viz.auto(b_is_true)

var b_is_false = Infer({method: "rejection", samples:10000},
     function(){ model(false) })

print("We observe b is not true")
viz.auto(b_is_false)
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>var model = function(observation){
  var a = flip(0.5)
  var b = flip(0.5)
  var c = (a || b) ? flip(0.9) : flip(0.2)
  condition(c &amp; (b == observation))
  return {"a": a}
}

var b_is_true = Infer({method: "rejection", samples:1000},
     function(){ model(true) })

print("We observe c and that b is true")
viz.auto(b_is_true)

var b_is_false = Infer({method: "rejection", samples:1000},
     function(){ model(false) })

print("We observe c and that b is not true")
viz.auto(b_is_false)
</code></pre></div></div>

<p>In the <a href="06-advancedBDA.html">next chapter</a>, weâ€™ll show how you can elaborate your models to better represent your data (under development).</p>

:ET