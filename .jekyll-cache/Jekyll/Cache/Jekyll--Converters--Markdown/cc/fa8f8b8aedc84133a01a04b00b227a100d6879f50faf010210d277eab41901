I"d,<p>WebPPL is a probabilistic programming language based on Javascript. WebPPL can be used most easily through <a href="http://webppl.org">webppl.org</a>. It can also be <a href="http://webppl.readthedocs.io/en/dev/installation.html">installed locally</a> and run from the <a href="http://webppl.readthedocs.io/en/dev/usage.html">command line</a>.</p>

<p>The deterministic part of WebPPL is a <a href="http://dippl.org/chapters/02-webppl.html">subset of Javascript</a>.</p>

<blockquote>
  <p>New to functional programming or JavaScript? Start off with a <a href="http://probmods.org/chapters/13-appendix-js-basics.html">basic introduction</a> to the deterministic parts of the language.</p>
</blockquote>

<p>The probabilistic aspects of WebPPL come from: <a href="http://webppl.readthedocs.io/en/dev/distributions.html">distributions</a> and <a href="http://webppl.readthedocs.io/en/dev/sample.html">sampling</a>,
marginal <a href="http://webppl.readthedocs.io/en/dev/inference/index.html">inference</a>,
and <a href="http://webppl.readthedocs.io/en/dev/inference/index.html#factor">factors</a>.</p>

<blockquote>
  <p><strong>Probabilistic model</strong>: A mathematical mapping from a set of latent (unobservable) variables to a <em>probability distribution</em> of observable outcomes or data. A <strong>probability distribution</strong> is simply a mathematical mapping between outcomes and their associated probability of occurrence.</p>
</blockquote>

<h3 id="sampling-testtniningirnigntigntingitnignit">Sampling testtniningirnigntigntingitnignit</h3>

<p>The core ingredient of probabilistic programs: <em>random primitives</em>.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>flip(0.6)
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">flip</code> is a function like any other function in a programming langauge: it takes an argument and returns a value. 
What makes <code class="language-plaintext highlighter-rouge">flip</code> special is that doesn’t return the same value every time you run it, even with the same arguments: It is a probabilistic function. 
Try running the code box above multiple times to see this.
Flip essentially flips a coin whose probability of landing on heads is given by the parameter value (above: 0.6).
(You can treat the value of <code class="language-plaintext highlighter-rouge">true</code> as “heads” and <code class="language-plaintext highlighter-rouge">false</code> as “tails”).</p>

<p>Because <code class="language-plaintext highlighter-rouge">flip</code> is a function (like any other), we can pass it to higher-order functions like <code class="language-plaintext highlighter-rouge">repeat()</code>
(Recall that “higher-order functions” are functions that take other functions as arguments.)</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>repeat(100, flip)
</code></pre></div></div>

<p>If you are uncertain about the arguments to <code class="language-plaintext highlighter-rouge">repeat()</code>, or other WebPPL functions, pop over to the <a href="http://docs.webppl.org/en/master/functions/arrays.html#repeat">WebPPL docs</a> to get it all straight.</p>

<h4 id="a-brief-aside-for-visualization">A brief aside for visualization</h4>

<p>WebPPL (as accessed in the browser) provides basic visualization tools. 
WebPPL-viz has a lot of functionality, the documentation for which can be found <a href="https://github.com/probmods/webppl-viz">here</a>. 
The coolest thing about WebPPL-viz is the default <code class="language-plaintext highlighter-rouge">viz()</code> function, which will take whatever you pass it and try to construct a reasonable visualization automatically. 
(This used to be called <code class="language-plaintext highlighter-rouge">viz.magic()</code>).</p>

<p><strong>Exercises:</strong></p>

<ol>
  <li>Try calling <code class="language-plaintext highlighter-rouge">viz()</code> on the output of the above code box.</li>
  <li>Run the code box several times. Does the output surprise you?</li>
  <li>Try repeating the flip 1000 times, and run the code box several times. What has changed? Why?</li>
  <li>Try repeating <code class="language-plaintext highlighter-rouge">flip(0.6)</code>. What needs to change from the original code box? (Hint: Recall that <code class="language-plaintext highlighter-rouge">repeat()</code> wants to take a function as an argument.)</li>
</ol>

<h3 id="distributions">Distributions</h3>

<p>Above, we looked at <em>samples</em> from probability distributions. 
The probability distribution was <em>implicit</em> in those sampling functions; it specified the probability of the different return values. 
When you repeatedly run the code box many times, you will start to approximate the underlying distribution better and better.</p>

<p>WebPPL also represents probability distributions <em>explicitly</em>. 
We call these explicit probability distributions: <strong>distribution objects</strong>.
Syntactically, this is denoted using a capitalized versions of the sampler functions.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// bernoulli(0.6) // same as flip(0.6)
viz(Bernoulli( { p: 0.6 } ) )
</code></pre></div></div>

<p>(Note: <code class="language-plaintext highlighter-rouge">flip()</code> is a cute way of referring to a sample from the <code class="language-plaintext highlighter-rouge">bernoulli()</code> distribution.)</p>

<p><strong>Exercise</strong>: Try running the above box many times. Does it change? Why not?</p>

<p>Distributions have parameters. (And different distributions have different parameters.)
For example, the Bernoulli distribution has a single parameter.
In WebPPL, it is called <code class="language-plaintext highlighter-rouge">p</code> and refers to the probability of the coin landing on heads.
<a href="http://docs.webppl.org/en/master/distributions.html">Click here</a> for a complete list of distributions and their parameters in WebPPL.
We can call the distributions by passing them objects with the parameter name(s) as keys and parameter value(s) as values (e.g., <code class="language-plaintext highlighter-rouge">{p: 0.6}</code>).
When a distribution is explicitly constructed, it can be sampled from by calling <code class="language-plaintext highlighter-rouge">sample()</code> on that distribution.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>var parameters = {p: 0.9}
var myDist = Bernoulli(parameters)
sample(myDist)
</code></pre></div></div>

<p><strong>Exercise</strong>: Line by line, describe what is happening in the above code box.</p>

<h3 id="properties-of-distribution-objects">Properties of distribution objects</h3>

<p>We just saw how you can call <code class="language-plaintext highlighter-rouge">sample()</code> on a distribution, and it returns a value from that distribution (sampled according to the its probability).
Distribution objects have two other properties that will be useful for us.</p>

<p>Sometimes, we want to know what possible values could be sampled from a distribution.
This is called the <strong>support</strong> of a distribution and it can be accessed by calling <code class="language-plaintext highlighter-rouge">myDist.support()</code>, where <code class="language-plaintext highlighter-rouge">myDist</code> is some distribution object.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// the support of the distribution
Bernoulli( { p : 0.9 } ).support() 
</code></pre></div></div>

<p>Other times, we have a sample from distribution and we want to know how probable it was to get that sample.
This is sometimes called “scoring a sample”, and it can be accessed by calling <code class="language-plaintext highlighter-rouge">myDist.score(mySample)</code>, where <code class="language-plaintext highlighter-rouge">myDist</code> is a distribution object and <code class="language-plaintext highlighter-rouge">mySample</code> is a value. 
Note that for the score of sample to be defined, the sample must be an element of the support of the distribution.
WebPPL returns not the probability of <code class="language-plaintext highlighter-rouge">mySample</code> under the distribution <code class="language-plaintext highlighter-rouge">myDist</code>, but the natural logarithm of the probability, or the log-probability.
To recover the probability, use the javascript function <code class="language-plaintext highlighter-rouge">Math.exp()</code>.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// the log-probability of true (e.g., "heads")
Bernoulli( { p : 0.9 } ).score(true)
</code></pre></div></div>

<p><strong>Exercises:</strong></p>

<ol>
  <li>Try changing the parameter value of the Bernoulli distribution in the first code chunk (for the support). Does the result change? Why or why not?</li>
  <li>Try changing the parameter value of the Bernoulli distribution in the second code chunk (for the score). Does the result change? Why or why not?</li>
  <li>Modify the second code chunk to return the probability of <code class="language-plaintext highlighter-rouge">true</code> (rather than the log-probability). What is the relation between the probability of <code class="language-plaintext highlighter-rouge">true</code> and the parameter to the Bernoulli distribution?</li>
</ol>

<h3 id="some-restrictions">Some restrictions</h3>

<p>Variables can be defined, but (unlike in JavaScript) their values cannot be redefined. For example, the following does not work:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>var a = 0;
a = 1; // won't work

var b = {x: 0};
b.x = 1; // won't work
</code></pre></div></div>

<p>This also means looping constructs (such as <code class="language-plaintext highlighter-rouge">for</code>) are not available; we use functional programming instead to operate on <a href="http://webppl.readthedocs.io/en/dev/functions/arrays.html">arrays</a>.
(Note that <a href="http://webppl.readthedocs.io/en/dev/functions/tensors.html">tensors</a> are not arrays.)</p>

<h2 id="challenge-problem">Challenge problem</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>var geometricCoin = function(){
  ...
}

</code></pre></div></div>

<p><strong>Exercises:</strong></p>

<ol>
  <li>Make a function (<code class="language-plaintext highlighter-rouge">geometricCoin</code>) that flips a coin (of whatever weight you’d like). If it comes up heads, you call that same function (<code class="language-plaintext highlighter-rouge">geometricCoin</code>) and add 1 to the result. If it comes up tails, you return the number 1.</li>
  <li>Pass that function to repeat, repeat it many times, and create a picture using <code class="language-plaintext highlighter-rouge">viz()</code></li>
</ol>

<p>In the <a href="03-simpleModels.html">next chapter</a>, we’ll start to compose generative models of data, and use observations (e.g., data we’ve collected in an experiment) to learn about the models we’ve created.</p>

:ET